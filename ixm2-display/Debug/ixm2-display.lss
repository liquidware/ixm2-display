
ixm2-display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000009aa  00000a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000a48  2**0
                  ALLOC
  3 .stab         0000198c  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005ad  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00002981  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000c7  00000000  00000000  000029e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000437  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000206  00000000  00000000  00002edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000694  00000000  00000000  000030e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000377c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000222  00000000  00000000  000038bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000064  00000000  00000000  00003ade  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d5 e0       	ldi	r29, 0x05	; 5
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea ea       	ldi	r30, 0xAA	; 170
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 30       	cpi	r26, 0x0C	; 12
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  e2:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <mdelay>:
 * Created: 12/7/2011 5:53:54 PM
 *  Author: lwlab
 * Design for 1MHz oscillator
 */ 
void mdelay(unsigned char x)
{
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	00 d0       	rcall	.+0      	; 0xf0 <mdelay+0x6>
  f0:	00 d0       	rcall	.+0      	; 0xf2 <mdelay+0x8>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	8c 83       	std	Y+4, r24	; 0x04
volatile unsigned char w,y,g;

for (w=0; w<x ; w++) {
  f8:	19 82       	std	Y+1, r1	; 0x01
  fa:	14 c0       	rjmp	.+40     	; 0x124 <mdelay+0x3a>
	for (y=0; y<2; y++) {
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	0c c0       	rjmp	.+24     	; 0x118 <mdelay+0x2e>
		for (g=0; g<41; g++) {
 100:	1b 82       	std	Y+3, r1	; 0x03
 102:	04 c0       	rjmp	.+8      	; 0x10c <mdelay+0x22>
		asm("nop");
 104:	00 00       	nop
{
volatile unsigned char w,y,g;

for (w=0; w<x ; w++) {
	for (y=0; y<2; y++) {
		for (g=0; g<41; g++) {
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	8b 83       	std	Y+3, r24	; 0x03
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	89 32       	cpi	r24, 0x29	; 41
 110:	c8 f3       	brcs	.-14     	; 0x104 <mdelay+0x1a>
void mdelay(unsigned char x)
{
volatile unsigned char w,y,g;

for (w=0; w<x ; w++) {
	for (y=0; y<2; y++) {
 112:	8a 81       	ldd	r24, Y+2	; 0x02
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	8a 83       	std	Y+2, r24	; 0x02
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	88 f3       	brcs	.-30     	; 0x100 <mdelay+0x16>
 */ 
void mdelay(unsigned char x)
{
volatile unsigned char w,y,g;

for (w=0; w<x ; w++) {
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	99 81       	ldd	r25, Y+1	; 0x01
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	98 17       	cp	r25, r24
 12a:	40 f3       	brcs	.-48     	; 0xfc <mdelay+0x12>
		for (g=0; g<41; g++) {
		asm("nop");
		}
	}
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <SIG_INTERRUPT2>:
extern struct omap_dss_device oled43_driver;

volatile uint8_t isDVICableAttached = 0;
volatile uint8_t isDisplayEnabled = 0;

SIGNAL (SIG_INTERRUPT2) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	;
}	
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <dss_init>:

void dss_init(void) {
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
	SETBIT(CTRL_DDR, DISPLAY_PD_PIN); 
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	20 e3       	ldi	r18, 0x30	; 48
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	20 64       	ori	r18, 0x40	; 64
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
	SETBIT(CTRL_DDR, DVI_PD_PIN);
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 e3       	ldi	r18, 0x30	; 48
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	20 62       	ori	r18, 0x20	; 32
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	SETBIT(CTRL_DDR, DSS_IO_OE_PIN);
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	20 e3       	ldi	r18, 0x30	; 48
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	20 81       	ld	r18, Z
 192:	20 61       	ori	r18, 0x10	; 16
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	CLRBIT(D5_0V_DVID_DDR, D5_0V_DVID_PNUM); //input
 198:	8a e2       	ldi	r24, 0x2A	; 42
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	2a e2       	ldi	r18, 0x2A	; 42
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	2b 7f       	andi	r18, 0xFB	; 251
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
	SETBIT(D5_0V_DVID_PORT, D5_0V_DVID_PNUM); //enable pull-up
 1aa:	8b e2       	ldi	r24, 0x2B	; 43
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	2b e2       	ldi	r18, 0x2B	; 43
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	24 60       	ori	r18, 0x04	; 4
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
	CLRBIT(CTRL_DDR, 0);  //Rev A boards have PF0 jumped to INT2, remove on future revisions
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	20 e3       	ldi	r18, 0x30	; 48
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	2e 7f       	andi	r18, 0xFE	; 254
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
	CLRBIT(CTRL_PORT, 0); //Rev A boards have PF0 jumped to INT2, remove on future revisions
 1ce:	81 e3       	ldi	r24, 0x31	; 49
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	21 e3       	ldi	r18, 0x31	; 49
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	2e 7f       	andi	r18, 0xFE	; 254
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
	
	/* Enable interrupt on rising edge, enable INT2 */
	SETBIT(EICRA, ISC20);
 1e0:	89 e6       	ldi	r24, 0x69	; 105
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	29 e6       	ldi	r18, 0x69	; 105
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 61       	ori	r18, 0x10	; 16
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
	SETBIT(EICRA, ISC21);
 1f2:	89 e6       	ldi	r24, 0x69	; 105
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	29 e6       	ldi	r18, 0x69	; 105
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	20 62       	ori	r18, 0x20	; 32
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
	SETBIT(EIMSK, INT2);
 204:	8d e3       	ldi	r24, 0x3D	; 61
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	2d e3       	ldi	r18, 0x3D	; 61
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	20 81       	ld	r18, Z
 210:	24 60       	ori	r18, 0x04	; 4
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
}
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <dss_enable>:

void dss_enable(void) {
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(CTRL_PORT, DISPLAY_PD_PIN); //enable system 5V
 224:	81 e3       	ldi	r24, 0x31	; 49
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	21 e3       	ldi	r18, 0x31	; 49
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	2f 7b       	andi	r18, 0xBF	; 191
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
	SETBIT(CTRL_PORT, DVI_PD_PIN); //enable DVI IO
 236:	81 e3       	ldi	r24, 0x31	; 49
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	21 e3       	ldi	r18, 0x31	; 49
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	20 62       	ori	r18, 0x20	; 32
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
	CLRBIT(CTRL_PORT, DSS_IO_OE_PIN); //enable DSS level shifter	
 248:	81 e3       	ldi	r24, 0x31	; 49
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	21 e3       	ldi	r18, 0x31	; 49
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	20 81       	ld	r18, Z
 254:	2f 7e       	andi	r18, 0xEF	; 239
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
}
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <dss_disable>:

void dss_disable(void) {
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	SETBIT(CTRL_PORT, DISPLAY_PD_PIN); //disable system 5V
 268:	81 e3       	ldi	r24, 0x31	; 49
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	21 e3       	ldi	r18, 0x31	; 49
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	f9 01       	movw	r30, r18
 272:	20 81       	ld	r18, Z
 274:	20 64       	ori	r18, 0x40	; 64
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
	CLRBIT(CTRL_PORT, DVI_PD_PIN); //disable DVI IO
 27a:	81 e3       	ldi	r24, 0x31	; 49
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	21 e3       	ldi	r18, 0x31	; 49
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	2f 7d       	andi	r18, 0xDF	; 223
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
	SETBIT(CTRL_PORT, DSS_IO_OE_PIN); //disable DSS level shifter	
 28c:	81 e3       	ldi	r24, 0x31	; 49
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	21 e3       	ldi	r18, 0x31	; 49
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	f9 01       	movw	r30, r18
 296:	20 81       	ld	r18, Z
 298:	20 61       	ori	r18, 0x10	; 16
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
}
 29e:	cf 91       	pop	r28
 2a0:	df 91       	pop	r29
 2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{		
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
	dss_init();
 2ac:	0e 94 ad 00 	call	0x15a	; 0x15a <dss_init>
	
	SETBIT(SMCR, SE);	//Sleep enable
 2b0:	83 e5       	ldi	r24, 0x53	; 83
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	23 e5       	ldi	r18, 0x53	; 83
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	21 60       	ori	r18, 0x01	; 1
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	SETBIT(SMCR, SM1); // Power down mode enable
 2c2:	83 e5       	ldi	r24, 0x53	; 83
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	23 e5       	ldi	r18, 0x53	; 83
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	f9 01       	movw	r30, r18
 2cc:	20 81       	ld	r18, Z
 2ce:	24 60       	ori	r18, 0x04	; 4
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
	sei(); //enable interrupts
 2d4:	78 94       	sei
	
	oled43_driver.init();
 2d6:	80 91 00 01 	lds	r24, 0x0100
 2da:	90 91 01 01 	lds	r25, 0x0101
 2de:	fc 01       	movw	r30, r24
 2e0:	09 95       	icall
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <main+0x42>
			dss_disable();
			oled43_driver.disable();
			isDisplayEnabled = 0;
			asm("sleep");
		}
    }
 2e4:	00 00       	nop
	sei(); //enable interrupts
	
	oled43_driver.init();
	
    while(1) {
		isDVICableAttached = (CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
 2e6:	89 e2       	ldi	r24, 0x29	; 41
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	88 2f       	mov	r24, r24
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	84 70       	andi	r24, 0x04	; 4
 2f4:	90 70       	andi	r25, 0x00	; 0
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	a9 f1       	breq	.+106    	; 0x364 <main+0xc0>
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
 2fa:	89 e2       	ldi	r24, 0x29	; 41
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	80 81       	ld	r24, Z
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	84 70       	andi	r24, 0x04	; 4
 308:	90 70       	andi	r25, 0x00	; 0
	sei(); //enable interrupts
	
	oled43_driver.init();
	
    while(1) {
		isDVICableAttached = (CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	59 f1       	breq	.+86     	; 0x364 <main+0xc0>
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
 30e:	89 e2       	ldi	r24, 0x29	; 41
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	80 81       	ld	r24, Z
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	84 70       	andi	r24, 0x04	; 4
 31c:	90 70       	andi	r25, 0x00	; 0
	
	oled43_driver.init();
	
    while(1) {
		isDVICableAttached = (CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	09 f1       	breq	.+66     	; 0x364 <main+0xc0>
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
 322:	89 e2       	ldi	r24, 0x29	; 41
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	fc 01       	movw	r30, r24
 328:	80 81       	ld	r24, Z
 32a:	88 2f       	mov	r24, r24
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	84 70       	andi	r24, 0x04	; 4
 330:	90 70       	andi	r25, 0x00	; 0
	oled43_driver.init();
	
    while(1) {
		isDVICableAttached = (CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
 332:	00 97       	sbiw	r24, 0x00	; 0
 334:	b9 f0       	breq	.+46     	; 0x364 <main+0xc0>
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
 336:	89 e2       	ldi	r24, 0x29	; 41
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	88 2f       	mov	r24, r24
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	84 70       	andi	r24, 0x04	; 4
 344:	90 70       	andi	r25, 0x00	; 0
	
    while(1) {
		isDVICableAttached = (CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	69 f0       	breq	.+26     	; 0x364 <main+0xc0>
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM));
 34a:	89 e2       	ldi	r24, 0x29	; 41
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	80 81       	ld	r24, Z
 352:	88 2f       	mov	r24, r24
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	84 70       	andi	r24, 0x04	; 4
 358:	90 70       	andi	r25, 0x00	; 0
    while(1) {
		isDVICableAttached = (CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	19 f0       	breq	.+6      	; 0x364 <main+0xc0>
	sei(); //enable interrupts
	
	oled43_driver.init();
	
    while(1) {
		isDVICableAttached = (CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <main+0xc4>
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	80 93 0a 01 	sts	0x010A, r24
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) && 
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM) &&
						CHECKBIT(D5_0V_DVID_PIN, D5_0V_DVID_PNUM));
						
		if (isDVICableAttached && !isDisplayEnabled) {
 36c:	80 91 0a 01 	lds	r24, 0x010A
 370:	88 23       	and	r24, r24
 372:	81 f0       	breq	.+32     	; 0x394 <main+0xf0>
 374:	80 91 0b 01 	lds	r24, 0x010B
 378:	88 23       	and	r24, r24
 37a:	61 f4       	brne	.+24     	; 0x394 <main+0xf0>
			dss_enable();
 37c:	0e 94 0e 01 	call	0x21c	; 0x21c <dss_enable>
			oled43_driver.enable();
 380:	80 91 02 01 	lds	r24, 0x0102
 384:	90 91 03 01 	lds	r25, 0x0103
 388:	fc 01       	movw	r30, r24
 38a:	09 95       	icall
			isDisplayEnabled = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 0b 01 	sts	0x010B, r24
			dss_disable();
			oled43_driver.disable();
			isDisplayEnabled = 0;
			asm("sleep");
		}
    }
 392:	a9 cf       	rjmp	.-174    	; 0x2e6 <main+0x42>
						
		if (isDVICableAttached && !isDisplayEnabled) {
			dss_enable();
			oled43_driver.enable();
			isDisplayEnabled = 1;
		} else if (!isDVICableAttached) {
 394:	80 91 0a 01 	lds	r24, 0x010A
 398:	88 23       	and	r24, r24
 39a:	09 f0       	breq	.+2      	; 0x39e <main+0xfa>
 39c:	a3 cf       	rjmp	.-186    	; 0x2e4 <main+0x40>
			dss_disable();
 39e:	0e 94 30 01 	call	0x260	; 0x260 <dss_disable>
			oled43_driver.disable();
 3a2:	80 91 04 01 	lds	r24, 0x0104
 3a6:	90 91 05 01 	lds	r25, 0x0105
 3aa:	fc 01       	movw	r30, r24
 3ac:	09 95       	icall
			isDisplayEnabled = 0;
 3ae:	10 92 0b 01 	sts	0x010B, r1
			asm("sleep");
 3b2:	88 95       	sleep
		}
    }
 3b4:	98 cf       	rjmp	.-208    	; 0x2e6 <main+0x42>

000003b6 <oled43_spi_init>:
#define RESET_HIGH digitalWrite(RESET_PIN, 1)
#define PANEL_PWR_LOW digitalWrite(PANEL_PWR_PIN, 0)
#define PANEL_PWR_HIGH digitalWrite(PANEL_PWR_PIN, 1)

/* Initialize the software SPI interface */
static void oled43_spi_init(void) {
 3b6:	df 93       	push	r29
 3b8:	cf 93       	push	r28
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
    CS_HIGH;
 3be:	8b e2       	ldi	r24, 0x2B	; 43
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	2b e2       	ldi	r18, 0x2B	; 43
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	20 81       	ld	r18, Z
 3ca:	2f 7e       	andi	r18, 0xEF	; 239
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
    MOSI_HIGH;
 3d0:	85 e2       	ldi	r24, 0x25	; 37
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	25 e2       	ldi	r18, 0x25	; 37
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	f9 01       	movw	r30, r18
 3da:	20 81       	ld	r18, Z
 3dc:	2f 77       	andi	r18, 0x7F	; 127
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
    CLK_HIGH;
 3e2:	8b e2       	ldi	r24, 0x2B	; 43
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	2b e2       	ldi	r18, 0x2B	; 43
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	f9 01       	movw	r30, r18
 3ec:	20 81       	ld	r18, Z
 3ee:	2f 7b       	andi	r18, 0xBF	; 191
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
}
 3f4:	cf 91       	pop	r28
 3f6:	df 91       	pop	r29
 3f8:	08 95       	ret

000003fa <oled43_spi_write8>:

/* Write an 8-bit byte onto the SPI bus */
static void oled43_spi_write8(uint8_t data) {
 3fa:	df 93       	push	r29
 3fc:	cf 93       	push	r28
 3fe:	00 d0       	rcall	.+0      	; 0x400 <oled43_spi_write8+0x6>
 400:	0f 92       	push	r0
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	8b 83       	std	Y+3, r24	; 0x03
uint8_t ii;
uint8_t bit;

    for (ii=0; ii < 8; ii++) {
 408:	19 82       	std	Y+1, r1	; 0x01
 40a:	3f c0       	rjmp	.+126    	; 0x48a <oled43_spi_write8+0x90>
        bit = (data >> (7-ii)) & 1;
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	88 2f       	mov	r24, r24
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	29 81       	ldd	r18, Y+1	; 0x01
 414:	22 2f       	mov	r18, r18
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	47 e0       	ldi	r20, 0x07	; 7
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	ba 01       	movw	r22, r20
 41e:	62 1b       	sub	r22, r18
 420:	73 0b       	sbc	r23, r19
 422:	9b 01       	movw	r18, r22
 424:	02 2e       	mov	r0, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <oled43_spi_write8+0x32>
 428:	95 95       	asr	r25
 42a:	87 95       	ror	r24
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <oled43_spi_write8+0x2e>
 430:	81 70       	andi	r24, 0x01	; 1
 432:	8a 83       	std	Y+2, r24	; 0x02
        if (bit) {
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	88 23       	and	r24, r24
 438:	51 f0       	breq	.+20     	; 0x44e <oled43_spi_write8+0x54>
            MOSI_HIGH;
 43a:	85 e2       	ldi	r24, 0x25	; 37
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	25 e2       	ldi	r18, 0x25	; 37
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	f9 01       	movw	r30, r18
 444:	20 81       	ld	r18, Z
 446:	2f 77       	andi	r18, 0x7F	; 127
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
 44c:	09 c0       	rjmp	.+18     	; 0x460 <oled43_spi_write8+0x66>
        } else {
            MOSI_LOW;
 44e:	85 e2       	ldi	r24, 0x25	; 37
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	25 e2       	ldi	r18, 0x25	; 37
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	f9 01       	movw	r30, r18
 458:	20 81       	ld	r18, Z
 45a:	20 68       	ori	r18, 0x80	; 128
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
        }

        CLK_LOW;		//clock the data in
 460:	8b e2       	ldi	r24, 0x2B	; 43
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	2b e2       	ldi	r18, 0x2B	; 43
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	f9 01       	movw	r30, r18
 46a:	20 81       	ld	r18, Z
 46c:	20 64       	ori	r18, 0x40	; 64
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
        CLK_HIGH;
 472:	8b e2       	ldi	r24, 0x2B	; 43
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	2b e2       	ldi	r18, 0x2B	; 43
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	f9 01       	movw	r30, r18
 47c:	20 81       	ld	r18, Z
 47e:	2f 7b       	andi	r18, 0xBF	; 191
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
/* Write an 8-bit byte onto the SPI bus */
static void oled43_spi_write8(uint8_t data) {
uint8_t ii;
uint8_t bit;

    for (ii=0; ii < 8; ii++) {
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	89 83       	std	Y+1, r24	; 0x01
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	88 30       	cpi	r24, 0x08	; 8
 48e:	08 f4       	brcc	.+2      	; 0x492 <oled43_spi_write8+0x98>
 490:	bd cf       	rjmp	.-134    	; 0x40c <oled43_spi_write8+0x12>
        }

        CLK_LOW;		//clock the data in
        CLK_HIGH;
    }
}
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	cf 91       	pop	r28
 49a:	df 91       	pop	r29
 49c:	08 95       	ret

0000049e <oled43_writeReg>:

/* Write a value to the OLED panel */
static void oled43_writeReg(uint8_t index, uint8_t val) {
 49e:	df 93       	push	r29
 4a0:	cf 93       	push	r28
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <oled43_writeReg+0x6>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	6a 83       	std	Y+2, r22	; 0x02
    CS_LOW;
 4ac:	8b e2       	ldi	r24, 0x2B	; 43
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	2b e2       	ldi	r18, 0x2B	; 43
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	f9 01       	movw	r30, r18
 4b6:	20 81       	ld	r18, Z
 4b8:	20 61       	ori	r18, 0x10	; 16
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
    oled43_spi_write8((index << 1));
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	88 0f       	add	r24, r24
 4c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <oled43_spi_write8>
    oled43_spi_write8(val);
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <oled43_spi_write8>
    CS_HIGH;
 4cc:	8b e2       	ldi	r24, 0x2B	; 43
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2b e2       	ldi	r18, 0x2B	; 43
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	20 81       	ld	r18, Z
 4d8:	2f 7e       	andi	r18, 0xEF	; 239
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
}
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	cf 91       	pop	r28
 4e4:	df 91       	pop	r29
 4e6:	08 95       	ret

000004e8 <oled43_hardware_init>:

static int oled43_hardware_init(void) {
 4e8:	df 93       	push	r29
 4ea:	cf 93       	push	r28
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <oled43_hardware_init+0x6>
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <oled43_hardware_init+0x8>
 4f0:	0f 92       	push	r0
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
uint8_t brightness;
double percent;

	/* Panel init sequence from the panel datasheet */
	PANEL_PWR_LOW;						// just to be sure, hold the oled power supply off
 4f6:	88 e2       	ldi	r24, 0x28	; 40
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	28 e2       	ldi	r18, 0x28	; 40
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	20 68       	ori	r18, 0x80	; 128
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
	MOSI_LOW;
 508:	85 e2       	ldi	r24, 0x25	; 37
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	25 e2       	ldi	r18, 0x25	; 37
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	20 68       	ori	r18, 0x80	; 128
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
	RESET_LOW;							// panel in reset
 51a:	8b e2       	ldi	r24, 0x2B	; 43
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	2b e2       	ldi	r18, 0x2B	; 43
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	20 68       	ori	r18, 0x80	; 128
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
	oled43_spi_init();					// init spi interface
 52c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <oled43_spi_init>
	RESET_HIGH;							// panel out of reset
 530:	8b e2       	ldi	r24, 0x2B	; 43
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	2b e2       	ldi	r18, 0x2B	; 43
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	f9 01       	movw	r30, r18
 53a:	20 81       	ld	r18, Z
 53c:	2f 77       	andi	r18, 0x7F	; 127
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18

    oled43_writeReg(0x04, 0x23); //DISPLAY_MODE2
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	63 e2       	ldi	r22, 0x23	; 35
 546:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>
    oled43_writeReg(0x05, 0x82); //DISPLAY_MODE3
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	62 e8       	ldi	r22, 0x82	; 130
 54e:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>

    oled43_writeReg(0x07, 0x0F); //DRIVER_CAPABILITY
 552:	87 e0       	ldi	r24, 0x07	; 7
 554:	6f e0       	ldi	r22, 0x0F	; 15
 556:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>
    oled43_writeReg(0x34, 0x18);
 55a:	84 e3       	ldi	r24, 0x34	; 52
 55c:	68 e1       	ldi	r22, 0x18	; 24
 55e:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>
    oled43_writeReg(0x35, 0x28);
 562:	85 e3       	ldi	r24, 0x35	; 53
 564:	68 e2       	ldi	r22, 0x28	; 40
 566:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>
    oled43_writeReg(0x36, 0x16);
 56a:	86 e3       	ldi	r24, 0x36	; 54
 56c:	66 e1       	ldi	r22, 0x16	; 22
 56e:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>
    oled43_writeReg(0x37, 0x01);
 572:	87 e3       	ldi	r24, 0x37	; 55
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>

    oled43_writeReg(0x03, 35);   //VGAM1_LEVEL
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	63 e2       	ldi	r22, 0x23	; 35
 57e:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>
     *  0x1E - 175 nits
     *  0x1C - 150 nits
     *  0x17 - 100 nits
     *  0x14 -  70 nits
     *  0x11 -  50 nits */
    brightness = 0x1C;
 582:	8c e1       	ldi	r24, 0x1C	; 28
 584:	89 83       	std	Y+1, r24	; 0x01
    percent = ((double)brightness)/
 586:	89 81       	ldd	r24, Y+1	; 0x01
 588:	88 2f       	mov	r24, r24
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	a0 e0       	ldi	r26, 0x00	; 0
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	bc 01       	movw	r22, r24
 592:	cd 01       	movw	r24, r26
 594:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__floatunsisf>
 598:	dc 01       	movw	r26, r24
 59a:	cb 01       	movw	r24, r22
 59c:	bc 01       	movw	r22, r24
 59e:	cd 01       	movw	r24, r26
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	52 e4       	ldi	r21, 0x42	; 66
 5a8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__divsf3>
 5ac:	dc 01       	movw	r26, r24
 5ae:	cb 01       	movw	r24, r22
 5b0:	bc 01       	movw	r22, r24
 5b2:	cd 01       	movw	r24, r26
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	48 ec       	ldi	r20, 0xC8	; 200
 5ba:	52 e4       	ldi	r21, 0x42	; 66
 5bc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__mulsf3>
 5c0:	dc 01       	movw	r26, r24
 5c2:	cb 01       	movw	r24, r22
 5c4:	8a 83       	std	Y+2, r24	; 0x02
 5c6:	9b 83       	std	Y+3, r25	; 0x03
 5c8:	ac 83       	std	Y+4, r26	; 0x04
 5ca:	bd 83       	std	Y+5, r27	; 0x05
               (0x20) * 100.0;

    //printk(KERN_INFO "cmel_oled43_panel: Setting brightness to %d percent\n", (int)percent);

    oled43_writeReg(0x3A, brightness);
 5cc:	8a e3       	ldi	r24, 0x3A	; 58
 5ce:	69 81       	ldd	r22, Y+1	; 0x01
 5d0:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>
    
    /* Display ON */
    oled43_writeReg(0x06, 0x03); //POWER_CTRL1
 5d4:	86 e0       	ldi	r24, 0x06	; 6
 5d6:	63 e0       	ldi	r22, 0x03	; 3
 5d8:	0e 94 4f 02 	call	0x49e	; 0x49e <oled43_writeReg>

	return 0;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
}
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	cf 91       	pop	r28
 5ec:	df 91       	pop	r29
 5ee:	08 95       	ret

000005f0 <oled43_panel_power_off>:

static void oled43_panel_power_off(void)
{
 5f0:	df 93       	push	r29
 5f2:	cf 93       	push	r28
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
    /* Turn off the power supply */
	PANEL_PWR_LOW;
 5f8:	88 e2       	ldi	r24, 0x28	; 40
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	28 e2       	ldi	r18, 0x28	; 40
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	f9 01       	movw	r30, r18
 602:	20 81       	ld	r18, Z
 604:	20 68       	ori	r18, 0x80	; 128
 606:	fc 01       	movw	r30, r24
 608:	20 83       	st	Z, r18
}
 60a:	cf 91       	pop	r28
 60c:	df 91       	pop	r29
 60e:	08 95       	ret

00000610 <oled43_panel_power_on>:

static void oled43_panel_power_on(void)
{
 610:	df 93       	push	r29
 612:	cf 93       	push	r28
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
	mdelay(100);
 618:	84 e6       	ldi	r24, 0x64	; 100
 61a:	0e 94 75 00 	call	0xea	; 0xea <mdelay>
	mdelay(100);
 61e:	84 e6       	ldi	r24, 0x64	; 100
 620:	0e 94 75 00 	call	0xea	; 0xea <mdelay>
    oled43_hardware_init();
 624:	0e 94 74 02 	call	0x4e8	; 0x4e8 <oled43_hardware_init>
	PANEL_PWR_HIGH;
 628:	88 e2       	ldi	r24, 0x28	; 40
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	28 e2       	ldi	r18, 0x28	; 40
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	f9 01       	movw	r30, r18
 632:	20 81       	ld	r18, Z
 634:	2f 77       	andi	r18, 0x7F	; 127
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
}
 63a:	cf 91       	pop	r28
 63c:	df 91       	pop	r29
 63e:	08 95       	ret

00000640 <oled43_panel_suspend>:

static void oled43_panel_suspend(void)
{
 640:	df 93       	push	r29
 642:	cf 93       	push	r28
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
	oled43_panel_power_off();
 648:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <oled43_panel_power_off>
}
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	08 95       	ret

00000652 <oled43_panel_resume>:

static void oled43_panel_resume(void)
{
 652:	df 93       	push	r29
 654:	cf 93       	push	r28
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
	oled43_panel_power_on();
 65a:	0e 94 08 03 	call	0x610	; 0x610 <oled43_panel_power_on>
}
 65e:	cf 91       	pop	r28
 660:	df 91       	pop	r29
 662:	08 95       	ret

00000664 <oled43_panel_enable>:

static void oled43_panel_enable(void)
{
 664:	df 93       	push	r29
 666:	cf 93       	push	r28
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
	oled43_panel_power_on();
 66c:	0e 94 08 03 	call	0x610	; 0x610 <oled43_panel_power_on>
}
 670:	cf 91       	pop	r28
 672:	df 91       	pop	r29
 674:	08 95       	ret

00000676 <oled43_panel_disable>:

static void oled43_panel_disable(void)
{
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	cd b7       	in	r28, 0x3d	; 61
 67c:	de b7       	in	r29, 0x3e	; 62
	oled43_panel_power_off();
 67e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <oled43_panel_power_off>
}
 682:	cf 91       	pop	r28
 684:	df 91       	pop	r29
 686:	08 95       	ret

00000688 <oled43_panel_drv_init>:

static void oled43_panel_drv_init(void)
{
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
	/* Set the data direction registers */
	SETBIT(DDRD, 4);
 690:	8a e2       	ldi	r24, 0x2A	; 42
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	2a e2       	ldi	r18, 0x2A	; 42
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	f9 01       	movw	r30, r18
 69a:	20 81       	ld	r18, Z
 69c:	20 61       	ori	r18, 0x10	; 16
 69e:	fc 01       	movw	r30, r24
 6a0:	20 83       	st	Z, r18
	SETBIT(DDRB, 7);
 6a2:	84 e2       	ldi	r24, 0x24	; 36
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	24 e2       	ldi	r18, 0x24	; 36
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	f9 01       	movw	r30, r18
 6ac:	20 81       	ld	r18, Z
 6ae:	20 68       	ori	r18, 0x80	; 128
 6b0:	fc 01       	movw	r30, r24
 6b2:	20 83       	st	Z, r18
	SETBIT(DDRD, 6);
 6b4:	8a e2       	ldi	r24, 0x2A	; 42
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	2a e2       	ldi	r18, 0x2A	; 42
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	f9 01       	movw	r30, r18
 6be:	20 81       	ld	r18, Z
 6c0:	20 64       	ori	r18, 0x40	; 64
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
	SETBIT(DDRD, 7);
 6c6:	8a e2       	ldi	r24, 0x2A	; 42
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	2a e2       	ldi	r18, 0x2A	; 42
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	f9 01       	movw	r30, r18
 6d0:	20 81       	ld	r18, Z
 6d2:	20 68       	ori	r18, 0x80	; 128
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 83       	st	Z, r18
	SETBIT(DDRC, 7);
 6d8:	87 e2       	ldi	r24, 0x27	; 39
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	27 e2       	ldi	r18, 0x27	; 39
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	f9 01       	movw	r30, r18
 6e2:	20 81       	ld	r18, Z
 6e4:	20 68       	ori	r18, 0x80	; 128
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
	
	/* Hold the power supply off until enabled */
	oled43_panel_power_off();
 6ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <oled43_panel_power_off>
}
 6ee:	cf 91       	pop	r28
 6f0:	df 91       	pop	r29
 6f2:	08 95       	ret

000006f4 <__divsf3>:
 6f4:	0c d0       	rcall	.+24     	; 0x70e <__divsf3x>
 6f6:	ba c0       	rjmp	.+372    	; 0x86c <__fp_round>
 6f8:	b2 d0       	rcall	.+356    	; 0x85e <__fp_pscB>
 6fa:	40 f0       	brcs	.+16     	; 0x70c <__divsf3+0x18>
 6fc:	a9 d0       	rcall	.+338    	; 0x850 <__fp_pscA>
 6fe:	30 f0       	brcs	.+12     	; 0x70c <__divsf3+0x18>
 700:	21 f4       	brne	.+8      	; 0x70a <__divsf3+0x16>
 702:	5f 3f       	cpi	r21, 0xFF	; 255
 704:	19 f0       	breq	.+6      	; 0x70c <__divsf3+0x18>
 706:	9b c0       	rjmp	.+310    	; 0x83e <__fp_inf>
 708:	51 11       	cpse	r21, r1
 70a:	e4 c0       	rjmp	.+456    	; 0x8d4 <__fp_szero>
 70c:	9e c0       	rjmp	.+316    	; 0x84a <__fp_nan>

0000070e <__divsf3x>:
 70e:	bf d0       	rcall	.+382    	; 0x88e <__fp_split3>
 710:	98 f3       	brcs	.-26     	; 0x6f8 <__divsf3+0x4>

00000712 <__divsf3_pse>:
 712:	99 23       	and	r25, r25
 714:	c9 f3       	breq	.-14     	; 0x708 <__divsf3+0x14>
 716:	55 23       	and	r21, r21
 718:	b1 f3       	breq	.-20     	; 0x706 <__divsf3+0x12>
 71a:	95 1b       	sub	r25, r21
 71c:	55 0b       	sbc	r21, r21
 71e:	bb 27       	eor	r27, r27
 720:	aa 27       	eor	r26, r26
 722:	62 17       	cp	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	38 f0       	brcs	.+14     	; 0x738 <__divsf3_pse+0x26>
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	22 0f       	add	r18, r18
 730:	33 1f       	adc	r19, r19
 732:	44 1f       	adc	r20, r20
 734:	aa 1f       	adc	r26, r26
 736:	a9 f3       	breq	.-22     	; 0x722 <__divsf3_pse+0x10>
 738:	33 d0       	rcall	.+102    	; 0x7a0 <__divsf3_pse+0x8e>
 73a:	0e 2e       	mov	r0, r30
 73c:	3a f0       	brmi	.+14     	; 0x74c <__divsf3_pse+0x3a>
 73e:	e0 e8       	ldi	r30, 0x80	; 128
 740:	30 d0       	rcall	.+96     	; 0x7a2 <__divsf3_pse+0x90>
 742:	91 50       	subi	r25, 0x01	; 1
 744:	50 40       	sbci	r21, 0x00	; 0
 746:	e6 95       	lsr	r30
 748:	00 1c       	adc	r0, r0
 74a:	ca f7       	brpl	.-14     	; 0x73e <__divsf3_pse+0x2c>
 74c:	29 d0       	rcall	.+82     	; 0x7a0 <__divsf3_pse+0x8e>
 74e:	fe 2f       	mov	r31, r30
 750:	27 d0       	rcall	.+78     	; 0x7a0 <__divsf3_pse+0x8e>
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	bb 1f       	adc	r27, r27
 75a:	26 17       	cp	r18, r22
 75c:	37 07       	cpc	r19, r23
 75e:	48 07       	cpc	r20, r24
 760:	ab 07       	cpc	r26, r27
 762:	b0 e8       	ldi	r27, 0x80	; 128
 764:	09 f0       	breq	.+2      	; 0x768 <__divsf3_pse+0x56>
 766:	bb 0b       	sbc	r27, r27
 768:	80 2d       	mov	r24, r0
 76a:	bf 01       	movw	r22, r30
 76c:	ff 27       	eor	r31, r31
 76e:	93 58       	subi	r25, 0x83	; 131
 770:	5f 4f       	sbci	r21, 0xFF	; 255
 772:	2a f0       	brmi	.+10     	; 0x77e <__divsf3_pse+0x6c>
 774:	9e 3f       	cpi	r25, 0xFE	; 254
 776:	51 05       	cpc	r21, r1
 778:	68 f0       	brcs	.+26     	; 0x794 <__divsf3_pse+0x82>
 77a:	61 c0       	rjmp	.+194    	; 0x83e <__fp_inf>
 77c:	ab c0       	rjmp	.+342    	; 0x8d4 <__fp_szero>
 77e:	5f 3f       	cpi	r21, 0xFF	; 255
 780:	ec f3       	brlt	.-6      	; 0x77c <__divsf3_pse+0x6a>
 782:	98 3e       	cpi	r25, 0xE8	; 232
 784:	dc f3       	brlt	.-10     	; 0x77c <__divsf3_pse+0x6a>
 786:	86 95       	lsr	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f7 95       	ror	r31
 790:	9f 5f       	subi	r25, 0xFF	; 255
 792:	c9 f7       	brne	.-14     	; 0x786 <__divsf3_pse+0x74>
 794:	88 0f       	add	r24, r24
 796:	91 1d       	adc	r25, r1
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret
 7a0:	e1 e0       	ldi	r30, 0x01	; 1
 7a2:	66 0f       	add	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	bb 1f       	adc	r27, r27
 7aa:	62 17       	cp	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	ba 07       	cpc	r27, r26
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__divsf3_pse+0xaa>
 7b4:	62 1b       	sub	r22, r18
 7b6:	73 0b       	sbc	r23, r19
 7b8:	84 0b       	sbc	r24, r20
 7ba:	ba 0b       	sbc	r27, r26
 7bc:	ee 1f       	adc	r30, r30
 7be:	88 f7       	brcc	.-30     	; 0x7a2 <__divsf3_pse+0x90>
 7c0:	e0 95       	com	r30
 7c2:	08 95       	ret

000007c4 <__floatunsisf>:
 7c4:	e8 94       	clt
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <__floatsisf+0x12>

000007c8 <__floatsisf>:
 7c8:	97 fb       	bst	r25, 7
 7ca:	3e f4       	brtc	.+14     	; 0x7da <__floatsisf+0x12>
 7cc:	90 95       	com	r25
 7ce:	80 95       	com	r24
 7d0:	70 95       	com	r23
 7d2:	61 95       	neg	r22
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	99 23       	and	r25, r25
 7dc:	a9 f0       	breq	.+42     	; 0x808 <__floatsisf+0x40>
 7de:	f9 2f       	mov	r31, r25
 7e0:	96 e9       	ldi	r25, 0x96	; 150
 7e2:	bb 27       	eor	r27, r27
 7e4:	93 95       	inc	r25
 7e6:	f6 95       	lsr	r31
 7e8:	87 95       	ror	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b7 95       	ror	r27
 7f0:	f1 11       	cpse	r31, r1
 7f2:	f8 cf       	rjmp	.-16     	; 0x7e4 <__floatsisf+0x1c>
 7f4:	fa f4       	brpl	.+62     	; 0x834 <__floatsisf+0x6c>
 7f6:	bb 0f       	add	r27, r27
 7f8:	11 f4       	brne	.+4      	; 0x7fe <__floatsisf+0x36>
 7fa:	60 ff       	sbrs	r22, 0
 7fc:	1b c0       	rjmp	.+54     	; 0x834 <__floatsisf+0x6c>
 7fe:	6f 5f       	subi	r22, 0xFF	; 255
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	16 c0       	rjmp	.+44     	; 0x834 <__floatsisf+0x6c>
 808:	88 23       	and	r24, r24
 80a:	11 f0       	breq	.+4      	; 0x810 <__floatsisf+0x48>
 80c:	96 e9       	ldi	r25, 0x96	; 150
 80e:	11 c0       	rjmp	.+34     	; 0x832 <__floatsisf+0x6a>
 810:	77 23       	and	r23, r23
 812:	21 f0       	breq	.+8      	; 0x81c <__floatsisf+0x54>
 814:	9e e8       	ldi	r25, 0x8E	; 142
 816:	87 2f       	mov	r24, r23
 818:	76 2f       	mov	r23, r22
 81a:	05 c0       	rjmp	.+10     	; 0x826 <__floatsisf+0x5e>
 81c:	66 23       	and	r22, r22
 81e:	71 f0       	breq	.+28     	; 0x83c <__floatsisf+0x74>
 820:	96 e8       	ldi	r25, 0x86	; 134
 822:	86 2f       	mov	r24, r22
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	2a f0       	brmi	.+10     	; 0x834 <__floatsisf+0x6c>
 82a:	9a 95       	dec	r25
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	da f7       	brpl	.-10     	; 0x82a <__floatsisf+0x62>
 834:	88 0f       	add	r24, r24
 836:	96 95       	lsr	r25
 838:	87 95       	ror	r24
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <__fp_inf>:
 83e:	97 f9       	bld	r25, 7
 840:	9f 67       	ori	r25, 0x7F	; 127
 842:	80 e8       	ldi	r24, 0x80	; 128
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	08 95       	ret

0000084a <__fp_nan>:
 84a:	9f ef       	ldi	r25, 0xFF	; 255
 84c:	80 ec       	ldi	r24, 0xC0	; 192
 84e:	08 95       	ret

00000850 <__fp_pscA>:
 850:	00 24       	eor	r0, r0
 852:	0a 94       	dec	r0
 854:	16 16       	cp	r1, r22
 856:	17 06       	cpc	r1, r23
 858:	18 06       	cpc	r1, r24
 85a:	09 06       	cpc	r0, r25
 85c:	08 95       	ret

0000085e <__fp_pscB>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	12 16       	cp	r1, r18
 864:	13 06       	cpc	r1, r19
 866:	14 06       	cpc	r1, r20
 868:	05 06       	cpc	r0, r21
 86a:	08 95       	ret

0000086c <__fp_round>:
 86c:	09 2e       	mov	r0, r25
 86e:	03 94       	inc	r0
 870:	00 0c       	add	r0, r0
 872:	11 f4       	brne	.+4      	; 0x878 <__fp_round+0xc>
 874:	88 23       	and	r24, r24
 876:	52 f0       	brmi	.+20     	; 0x88c <__fp_round+0x20>
 878:	bb 0f       	add	r27, r27
 87a:	40 f4       	brcc	.+16     	; 0x88c <__fp_round+0x20>
 87c:	bf 2b       	or	r27, r31
 87e:	11 f4       	brne	.+4      	; 0x884 <__fp_round+0x18>
 880:	60 ff       	sbrs	r22, 0
 882:	04 c0       	rjmp	.+8      	; 0x88c <__fp_round+0x20>
 884:	6f 5f       	subi	r22, 0xFF	; 255
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__fp_split3>:
 88e:	57 fd       	sbrc	r21, 7
 890:	90 58       	subi	r25, 0x80	; 128
 892:	44 0f       	add	r20, r20
 894:	55 1f       	adc	r21, r21
 896:	59 f0       	breq	.+22     	; 0x8ae <__fp_splitA+0x10>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	71 f0       	breq	.+28     	; 0x8b8 <__fp_splitA+0x1a>
 89c:	47 95       	ror	r20

0000089e <__fp_splitA>:
 89e:	88 0f       	add	r24, r24
 8a0:	97 fb       	bst	r25, 7
 8a2:	99 1f       	adc	r25, r25
 8a4:	61 f0       	breq	.+24     	; 0x8be <__fp_splitA+0x20>
 8a6:	9f 3f       	cpi	r25, 0xFF	; 255
 8a8:	79 f0       	breq	.+30     	; 0x8c8 <__fp_splitA+0x2a>
 8aa:	87 95       	ror	r24
 8ac:	08 95       	ret
 8ae:	12 16       	cp	r1, r18
 8b0:	13 06       	cpc	r1, r19
 8b2:	14 06       	cpc	r1, r20
 8b4:	55 1f       	adc	r21, r21
 8b6:	f2 cf       	rjmp	.-28     	; 0x89c <__fp_split3+0xe>
 8b8:	46 95       	lsr	r20
 8ba:	f1 df       	rcall	.-30     	; 0x89e <__fp_splitA>
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <__fp_splitA+0x30>
 8be:	16 16       	cp	r1, r22
 8c0:	17 06       	cpc	r1, r23
 8c2:	18 06       	cpc	r1, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	f1 cf       	rjmp	.-30     	; 0x8aa <__fp_splitA+0xc>
 8c8:	86 95       	lsr	r24
 8ca:	71 05       	cpc	r23, r1
 8cc:	61 05       	cpc	r22, r1
 8ce:	08 94       	sec
 8d0:	08 95       	ret

000008d2 <__fp_zero>:
 8d2:	e8 94       	clt

000008d4 <__fp_szero>:
 8d4:	bb 27       	eor	r27, r27
 8d6:	66 27       	eor	r22, r22
 8d8:	77 27       	eor	r23, r23
 8da:	cb 01       	movw	r24, r22
 8dc:	97 f9       	bld	r25, 7
 8de:	08 95       	ret

000008e0 <__mulsf3>:
 8e0:	0b d0       	rcall	.+22     	; 0x8f8 <__mulsf3x>
 8e2:	c4 cf       	rjmp	.-120    	; 0x86c <__fp_round>
 8e4:	b5 df       	rcall	.-150    	; 0x850 <__fp_pscA>
 8e6:	28 f0       	brcs	.+10     	; 0x8f2 <__mulsf3+0x12>
 8e8:	ba df       	rcall	.-140    	; 0x85e <__fp_pscB>
 8ea:	18 f0       	brcs	.+6      	; 0x8f2 <__mulsf3+0x12>
 8ec:	95 23       	and	r25, r21
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <__mulsf3+0x12>
 8f0:	a6 cf       	rjmp	.-180    	; 0x83e <__fp_inf>
 8f2:	ab cf       	rjmp	.-170    	; 0x84a <__fp_nan>
 8f4:	11 24       	eor	r1, r1
 8f6:	ee cf       	rjmp	.-36     	; 0x8d4 <__fp_szero>

000008f8 <__mulsf3x>:
 8f8:	ca df       	rcall	.-108    	; 0x88e <__fp_split3>
 8fa:	a0 f3       	brcs	.-24     	; 0x8e4 <__mulsf3+0x4>

000008fc <__mulsf3_pse>:
 8fc:	95 9f       	mul	r25, r21
 8fe:	d1 f3       	breq	.-12     	; 0x8f4 <__mulsf3+0x14>
 900:	95 0f       	add	r25, r21
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	55 1f       	adc	r21, r21
 906:	62 9f       	mul	r22, r18
 908:	f0 01       	movw	r30, r0
 90a:	72 9f       	mul	r23, r18
 90c:	bb 27       	eor	r27, r27
 90e:	f0 0d       	add	r31, r0
 910:	b1 1d       	adc	r27, r1
 912:	63 9f       	mul	r22, r19
 914:	aa 27       	eor	r26, r26
 916:	f0 0d       	add	r31, r0
 918:	b1 1d       	adc	r27, r1
 91a:	aa 1f       	adc	r26, r26
 91c:	64 9f       	mul	r22, r20
 91e:	66 27       	eor	r22, r22
 920:	b0 0d       	add	r27, r0
 922:	a1 1d       	adc	r26, r1
 924:	66 1f       	adc	r22, r22
 926:	82 9f       	mul	r24, r18
 928:	22 27       	eor	r18, r18
 92a:	b0 0d       	add	r27, r0
 92c:	a1 1d       	adc	r26, r1
 92e:	62 1f       	adc	r22, r18
 930:	73 9f       	mul	r23, r19
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	62 1f       	adc	r22, r18
 938:	83 9f       	mul	r24, r19
 93a:	a0 0d       	add	r26, r0
 93c:	61 1d       	adc	r22, r1
 93e:	22 1f       	adc	r18, r18
 940:	74 9f       	mul	r23, r20
 942:	33 27       	eor	r19, r19
 944:	a0 0d       	add	r26, r0
 946:	61 1d       	adc	r22, r1
 948:	23 1f       	adc	r18, r19
 94a:	84 9f       	mul	r24, r20
 94c:	60 0d       	add	r22, r0
 94e:	21 1d       	adc	r18, r1
 950:	82 2f       	mov	r24, r18
 952:	76 2f       	mov	r23, r22
 954:	6a 2f       	mov	r22, r26
 956:	11 24       	eor	r1, r1
 958:	9f 57       	subi	r25, 0x7F	; 127
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	8a f0       	brmi	.+34     	; 0x980 <__mulsf3_pse+0x84>
 95e:	e1 f0       	breq	.+56     	; 0x998 <__mulsf3_pse+0x9c>
 960:	88 23       	and	r24, r24
 962:	4a f0       	brmi	.+18     	; 0x976 <__mulsf3_pse+0x7a>
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	bb 1f       	adc	r27, r27
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	91 50       	subi	r25, 0x01	; 1
 972:	50 40       	sbci	r21, 0x00	; 0
 974:	a9 f7       	brne	.-22     	; 0x960 <__mulsf3_pse+0x64>
 976:	9e 3f       	cpi	r25, 0xFE	; 254
 978:	51 05       	cpc	r21, r1
 97a:	70 f0       	brcs	.+28     	; 0x998 <__mulsf3_pse+0x9c>
 97c:	60 cf       	rjmp	.-320    	; 0x83e <__fp_inf>
 97e:	aa cf       	rjmp	.-172    	; 0x8d4 <__fp_szero>
 980:	5f 3f       	cpi	r21, 0xFF	; 255
 982:	ec f3       	brlt	.-6      	; 0x97e <__mulsf3_pse+0x82>
 984:	98 3e       	cpi	r25, 0xE8	; 232
 986:	dc f3       	brlt	.-10     	; 0x97e <__mulsf3_pse+0x82>
 988:	86 95       	lsr	r24
 98a:	77 95       	ror	r23
 98c:	67 95       	ror	r22
 98e:	b7 95       	ror	r27
 990:	f7 95       	ror	r31
 992:	e7 95       	ror	r30
 994:	9f 5f       	subi	r25, 0xFF	; 255
 996:	c1 f7       	brne	.-16     	; 0x988 <__mulsf3_pse+0x8c>
 998:	fe 2b       	or	r31, r30
 99a:	88 0f       	add	r24, r24
 99c:	91 1d       	adc	r25, r1
 99e:	96 95       	lsr	r25
 9a0:	87 95       	ror	r24
 9a2:	97 f9       	bld	r25, 7
 9a4:	08 95       	ret

000009a6 <_exit>:
 9a6:	f8 94       	cli

000009a8 <__stop_program>:
 9a8:	ff cf       	rjmp	.-2      	; 0x9a8 <__stop_program>
